Scala
1.	What is a trait ? when to use ?  example
	A trait is a concept from object-oriented programming that allows for the composition of classes from reusable sets of methods. Traits are similar to interfaces, but they can provide concrete implementations of methods as well. They are used to share behavior across different classes without using inheritance.

When to Use Traits:
Multiple Inheritance: When you need to implement multiple inheritance without the diamond problem, traits can be very useful.
Code Reuse: When you have common functionality that needs to be shared across different, possibly unrelated classes.
Avoiding Inheritance: When you want to avoid deep inheritance hierarchies and prefer composition over inheritance.
Modular Design: When you want to design small, modular, reusable components that can be easily mixed into classes
	example : trait Logger {
  def log(message: String): Unit = {
    println(message)
  }
}

class User extends Logger {
  def createUser(username: String): Unit = {
    // Some user creation logic
    log(s"User $username created")
  }
}

class Order extends Logger {
  def createOrder(orderId: Int): Unit = {
    // Some order creation logic
    log(s"Order $orderId created")
  }
}

val user = new User()
user.createUser("john_doe")

val order = new Order()
order.createOrder(1234)
2.	Difference between trait and sealed trait?
	In Scala, both trait and sealed trait are used to define traits, which are similar to interfaces in other programming languages. However, there are significant differences between a regular trait and a sealed trait, primarily concerning the control over inheritance and pattern matching. Here’s a detailed explanation of the differences:

Trait
Open for Extension Anywhere:

A regular trait can be extended (i.e., mixed into classes) anywhere in the codebase. There are no restrictions on where it can be extended.
Usage:

Regular traits are used when you want to define a common interface or functionality that can be reused across multiple classes without restricting where those classes can be defined.
Pattern Matching:

When using pattern matching on instances of a regular trait, the compiler cannot exhaustively check if all possible cases have been handled. This is because new implementations can be added anywhere in the codebase.
Sealed Trait
Restricted Extension:

A sealed trait can only be extended within the same file where it is defined. This restriction allows for better control over the possible implementations of the trait.
Usage:

Sealed traits are useful when you want to have a limited and known set of subclasses. This is particularly useful in scenarios like algebraic data types (ADTs) where you want to ensure that all possible cases are handled.
Pattern Matching:

The Scala compiler can perform exhaustiveness checks when pattern matching on instances of a sealed trait. Since the compiler knows all possible subclasses (because they are restricted to the same file), it can warn if a match is not exhaustive.
Example
Regular Trait Example
scala
Copy code
trait Animal {
  def makeSound(): String
}

class Dog extends Animal {
  override def makeSound(): String = "Bark"
}

class Cat extends Animal {
  override def makeSound(): String = "Meow"
}
Sealed Trait Example
scala
Copy code
sealed trait Shape

case class Circle(radius: Double) extends Shape
case class Rectangle(width: Double, height: Double) extends Shape

def area(shape: Shape): Double = shape match {
  case Circle(radius) => Math.PI * radius * radius
  case Rectangle(width, height) => width * height
}
In the sealed trait example, if you try to add a new subclass of Shape in a different file, the Scala compiler will not allow it. Additionally, if you miss handling a case in the area function, the compiler will warn you that the match may not be exhaustive.

Summary
Trait: Can be extended anywhere, no exhaustiveness check for pattern matching.
Sealed Trait: Can only be extended in the same file, allows exhaustiveness check for pattern matching.
3.	What is an abstract class?
	In Scala, an abstract class is a class that cannot be instantiated directly and is designed to be extended by other classes. Abstract classes in Scala can contain both abstract methods (methods without implementation) and concrete methods (fully implemented methods). They serve as a blueprint for other classes, allowing the definition of common behavior and the enforcement of a contract for subclasses.

Characteristics of Abstract Classes in Scala
Cannot Be Instantiated:
You cannot create an instance of an abstract class directly. It must be subclassed.
Abstract Methods:
An abstract class can declare methods without providing their implementations. Subclasses must provide the implementations for these methods.
Concrete Methods:
An abstract class can also include methods with full implementations, which can be inherited by subclasses.
Constructors:
Abstract classes can have constructors, and these constructors can be called when creating instances of subclasses.
Inheritance:
Subclasses of an abstract class can extend the abstract class, implementing its abstract methods and optionally overriding its concrete methods.
Example in Scala
Here’s a concrete example illustrating the concept of an abstract class in Scala:

scala
Copy code
// Define an abstract class
abstract class Animal {
  // Abstract method (no implementation)
  def makeSound(): String

  // Concrete method (has implementation)
  def sleep(): String = "The animal is sleeping"
}

// Define a subclass that extends the abstract class
class Dog extends Animal {
  // Provide implementation for the abstract method
  override def makeSound(): String = "Bark"
}

// Define another subclass that extends the abstract class
class Cat extends Animal {
  // Provide implementation for the abstract method
  override def makeSound(): String = "Meow"
}

// Usage
val dog = new Dog
println(dog.makeSound()) // Output: Bark
println(dog.sleep())     // Output: The animal is sleeping

val cat = new Cat
println(cat.makeSound()) // Output: Meow
println(cat.sleep())     // Output: The animal is sleeping
Key Points
Instantiation: You cannot create an instance of Animal directly since it is an abstract class.
Abstract Methods: The makeSound method in Animal is abstract and must be implemented by any subclass.
Concrete Methods: The sleep method in Animal is a concrete method and is inherited by the subclasses Dog and Cat.
Usage Scenarios
Defining Interfaces: Abstract classes are often used to define common interfaces for a group of related classes, ensuring that all subclasses adhere to a specific contract.
Shared Code: Abstract classes allow for the sharing of common code among multiple subclasses, reducing code duplication.
Framework Design: In framework design, abstract classes can define template methods that outline the steps of an algorithm, while allowing subclasses to provide specific implementations.
Abstract classes in Scala provide a mechanism to define common behavior and enforce a contract for subclasses, facilitating code reuse and design consistency.
 
4.	What is the difference between  java interface and a scala trait?
	
Java interfaces and Scala traits serve similar purposes, allowing the creation of abstractions that can be mixed into classes to define shared behavior. However, there are important differences between them:

1. Methods with Implementation
Java Interface: Prior to Java 8, interfaces could only contain method signatures (abstract methods) without any implementation. From Java 8 onwards, interfaces can have default methods (methods with a body), but these are optional and have limitations compared to full implementation in traits.
Scala Trait: A Scala trait can contain both abstract and fully implemented methods. This makes traits more powerful and flexible than traditional Java interfaces.
java
Copy code
// Java Interface
public interface MyInterface {
    void abstractMethod();  // Abstract method
    
    // Default method (from Java 8)
    default void defaultMethod() {
        System.out.println("This is a default method.");
    }
}
scala
Copy code
// Scala Trait
trait MyTrait {
    def abstractMethod(): Unit  // Abstract method

    def implementedMethod(): Unit = {  // Fully implemented method
        println("This is a fully implemented method in a trait.")
    }
}
2. State/Fields
Java Interface: Interfaces in Java cannot have state, i.e., they cannot contain instance variables. From Java 8 onwards, interfaces can have static and default methods with static fields, but these fields are not instance variables.
Scala Trait: Traits can have fields (variables) that hold state. These fields can be initialized, and the state can be shared among all instances of classes that mix in the trait.
scala
Copy code
// Scala Trait with State
trait MyTrait {
    var state: Int = 0  // A field with initial value

    def showState(): Unit = {
        println(s"State value is: $state")
    }
}
3. Inheritance
Java Interface: A class in Java can implement multiple interfaces, but an interface cannot extend a class. An interface can, however, extend multiple other interfaces.
Scala Trait: Traits can be mixed into classes, and a class can extend multiple traits (using the with keyword). A trait can also extend a class or another trait, which means it can inherit behavior and state.
scala
Copy code
// Scala class extending a trait
class MyClass extends MyTrait with AnotherTrait
4. Constructor Parameters
Java Interface: Interfaces cannot have constructors or constructor parameters.
Scala Trait: Traits cannot have constructor parameters like classes, but they can have an initialization block (which acts similarly to a constructor). Traits can define state and behavior that is initialized when the trait is mixed into a class.
scala
Copy code
// Scala Trait with initialization
trait MyTrait {
    println("Trait is being initialized")

    def abstractMethod(): Unit
}
5. Multiple Inheritance
Java Interface: Java does not allow a class to inherit from multiple classes, but it allows a class to implement multiple interfaces. However, due to the single inheritance of classes, Java avoids complexities associated with multiple inheritance.
Scala Trait: Scala supports multiple inheritance of traits. A class can mix in multiple traits, and Scala handles method conflicts through a well-defined linearization process (the order in which traits are inherited).
scala
Copy code
trait A {
    def method() = println("A")
}

trait B extends A {
    override def method() = println("B")
}

class C extends A with B  // B's method will be called due to linearization
6. Purpose and Usage
Java Interface: Interfaces are primarily used to define a contract that multiple classes can implement. They are often used to achieve polymorphism.
Scala Trait: Traits are used not only to define a contract but also to provide reusable behavior (with state and methods). They are more versatile and can serve as both interfaces and mixins.
5.	What is a singleton 
	In Scala, a singleton is a design pattern that restricts the instantiation of a class to exactly one instance, similar to the singleton pattern in other programming languages. However, Scala provides a very concise and elegant way to define singletons using the object keyword.

Singleton in Scala Using object
In Scala, you can define a singleton object using the object keyword. This creates a class that has exactly one instance, and this instance is created lazily when first accessed.

Example
scala
Copy code
object Singleton {
  // Fields and methods
  def doSomething(): Unit = {
    println("Singleton instance method called")
  }
}

// Usage
Singleton.doSomething()
Explanation
object Singleton: This defines a singleton object named Singleton. Unlike class, which can have multiple instances, an object in Scala is guaranteed to have only one instance.
Methods and Fields: You can define methods and fields inside the singleton object just like you would in a class. These methods and fields belong to the single instance of the object.
Usage: To use the singleton object, you simply refer to it by name. There is no need to instantiate it.
6.	What is a higher order function?
7.	What is a closure function
8.	What is a companion object? What are the advantages ? example
9.	Nil vs Null vs null vs Nothing vs None vs Unit 
10.	What is pure function?
11.	What is SBT and how have you used it? 
12.	What is currying?
13.	Difference between currying and higher-order functions
14.	Difference between var and val?
15.	What is case class?
16.	Why/when to use case class? Example
17.	Difference between case class and normal class?
18.	Scala type hierarchy?
19.	What are partially applied functions?
20.	What is tail recursion.